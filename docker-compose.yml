version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: attribution-db
    environment:
      POSTGRES_DB: attribution_db
      POSTGRES_USER: attribution_user
      POSTGRES_PASSWORD: attribution_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attribution_user -d attribution_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - attribution-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: attribution-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - attribution-network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: attribution-backend
    environment:
      - ENVIRONMENT=production
      - DB_URL=postgresql://attribution_user:attribution_password@postgres:5432/attribution_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - attribution-network

  # Streamlit Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: attribution-frontend
    environment:
      - API_BASE_URL=http://backend:8000
      - STREAMLIT_SERVER_PORT=8501
    ports:
      - "8501:8501"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - attribution-network

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: attribution-celery-worker
    command: celery -A backend.app.core.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DB_URL=postgresql://attribution_user:attribution_password@postgres:5432/attribution_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - attribution-network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: attribution-celery-beat
    command: celery -A backend.app.core.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DB_URL=postgresql://attribution_user:attribution_password@postgres:5432/attribution_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - attribution-network

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: attribution-flower
    command: celery -A backend.app.core.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - attribution-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: attribution-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - attribution-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: attribution-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - attribution-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: attribution-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - attribution-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  attribution-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16